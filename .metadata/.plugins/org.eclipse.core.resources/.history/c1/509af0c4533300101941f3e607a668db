package com.br.ff.controller;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.yaml.snakeyaml.constructor.DuplicateKeyException;

import com.br.ff.controller.Request.UsersRequest;
import com.br.ff.controller.Response.Response;
import com.br.ff.model.Users;
import com.br.ff.model.Enum.ProfileEnum;
import com.br.ff.services.UsersService;

import jakarta.servlet.http.HttpServletRequest;

@RestController
@RequestMapping("/users")
@CrossOrigin(origins = "*")
public class UsersController {
	@Autowired
	private UsersService userService;
	
	@Autowired
	private PasswordEncoder passwordEncoder;
	
	private final String uploadDir = "uploads/";
	
	
	@PostMapping(consumes = MediaType.MULTIPART_FORM_DATA_VALUE,value="/register")
	public ResponseEntity<?> registerUser(
	        @RequestParam String name,
	        @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate birthDate,
	        @RequestParam String username,
	        @RequestParam String phone,
	        @RequestParam String password,
	        @RequestPart(required = false) MultipartFile photo) {
	    try {
	        Users users = new Users();
	        users.setName(name);
	        users.setBirthDate(birthDate);
	        users.setUsername(username);
	        users.setPhone(phone);
	        users.setPassword(passwordEncoder.encode(password)); // ✅ Define a senha no objeto
		    users.setProfile(ProfileEnum.PATIENCE);

	        if (photo != null && !photo.isEmpty()) {
	            String fileName = UUID.randomUUID() + "_" + photo.getOriginalFilename();
	            Path path = Paths.get(uploadDir + fileName);
	            Files.createDirectories(path.getParent());
	            Files.write(path, photo.getBytes());
	            users.setPhotoPath(path.toString());
	        }

	        userService.createOrUpdate(users);
	        return ResponseEntity.ok("Usuário cadastrado com sucesso!");
	    } catch (DataIntegrityViolationException ex) {
	        return ResponseEntity
	                .status(HttpStatus.CONFLICT)
	                .body("O e-mail informado já está cadastrado.");
	    } catch (Exception ex) {
	        return ResponseEntity
	                .status(HttpStatus.INTERNAL_SERVER_ERROR)
	                .body("Erro ao cadastrar usuário.");
	    }
	}

    
    @PostMapping("/forgot-password")
    public ResponseEntity<?> forgotPassword(@RequestBody Map<String, String> body) {
        String email = body.get("email");
        Users users = userService.findByUsername(email);

        if (!users.getId().equals(null)) {
            // Aqui você pode enviar e-mail com token ou link de redefinição
            System.out.println("Instruções enviadas para: " + email);
        }

        // Resposta genérica por segurança
        return ResponseEntity.ok("Se o email estiver cadastrado, enviaremos instruções.");
    }
	
	@PostMapping
	@PreAuthorize("hasAnyRole('ADMIN')")
	public ResponseEntity<Response<Users>> create(HttpServletRequest request, @RequestBody UsersRequest usersRequest, 
	                                              BindingResult result) {
	    Response<Users> response = new Response<Users>();
	    try {
	        // Validando os dados recebidos
	        validateCreateUser(usersRequest, result);
	        
	        // Se houver erros de validação, retorna erro
	        if (result.hasErrors()) {
	            result.getAllErrors().forEach(error -> response.getErrors().add(error.getDefaultMessage()));
	            return ResponseEntity.badRequest().body(response);
	        }

	        // Converte o DTO para a entidade Users
	        Users user = new Users();
	        user.setUsername(usersRequest.getUsername());
	        user.setProfile(usersRequest.getProfile());
	        user.setPassword(passwordEncoder.encode(usersRequest.getPassword()));  // Codificando a senha
	        
	        // Chama o serviço para criar ou atualizar o usuário
	        Users userPersisted = userService.createOrUpdate(user);
	        
	        // Adiciona o usuário persistido na resposta
	        response.setData(userPersisted);
	    } catch (DuplicateKeyException de) {
	        response.getErrors().add("Username already registered!");
	        return ResponseEntity.badRequest().body(response);
	    } catch (Exception e) {
	        response.getErrors().add(e.getMessage());
	        return ResponseEntity.badRequest().body(response);
	    }

	    return ResponseEntity.ok(response);  // Retorna a resposta com o usuário criado
	}
	
	private void validateCreateUser(UsersRequest user, BindingResult result) {
		if(user.getUsername() == null) {
			result.addError(new ObjectError("Users", "Username no information"));
		}
	}
	
	@PutMapping
	@PreAuthorize("hasAnyRole('ADMIN')")
	public ResponseEntity<Response<Users>> update(HttpServletRequest request, @RequestBody UsersRequest userRequest, 
	                                              BindingResult result) {
	    Response<Users> response = new Response<Users>();
	    try {
	        // Validando os dados recebidos
	        validateUpdateUsers(userRequest, result);
	        
	        // Se houver erros de validação, retorna erro
	        if (result.hasErrors()) {
	            result.getAllErrors().forEach(error -> response.getErrors().add(error.getDefaultMessage()));
	            return ResponseEntity.badRequest().body(response);
	        }

	        // Verificar se o usuário existe no banco de dados
	        Optional<Users> existingUser = userService.findById(userRequest.getId());
	        if (!existingUser.isPresent()) {
	            response.getErrors().add("User not found with ID: " + userRequest.getId());
	            return ResponseEntity.badRequest().body(response);
	        }

	        // Converte o DTO para a entidade Users
	        Users user = existingUser.get(); // Recupera o usuário existente
	        user.setUsername(userRequest.getUsername());
	        user.setProfile(userRequest.getProfile());
	        user.setPassword(passwordEncoder.encode(userRequest.getPassword())); // Codificando a senha

	        // Chama o serviço para atualizar o usuário
	        Users updatedUser = userService.createOrUpdate(user);

	        // Adiciona o usuário atualizado na resposta
	        response.setData(updatedUser);
	    } catch (Exception e) {
	        response.getErrors().add(e.getMessage());
	        return ResponseEntity.badRequest().body(response);
	    }

	    return ResponseEntity.ok(response);  // Retorna a resposta com o usuário atualizado
	}

	
	private void validateUpdateUsers(UsersRequest user, BindingResult result) {
		if(user.getId() == null) {
			result.addError(new ObjectError("Users", "ID no information"));
		}
		if(user.getUsername() == null) {
			result.addError(new ObjectError("Users", "Username no information"));
		}
	}
	
	@GetMapping(value="/{id}")
	@PreAuthorize("hasAnyRole('ADMIN')")
	public ResponseEntity<Response<Users>> findById(@PathVariable("id") Long id) {
	    Response<Users> response = new Response<Users>();
	    
	    // Verificar se o usuário existe no banco
	    Optional<Users> userOptional = this.userService.findById(id);
	    
	    // Se o usuário não for encontrado, retorna erro
	    if (!userOptional.isPresent()) {
	        response.getErrors().add("Register not found: " + id);
	        return ResponseEntity.badRequest().body(response);
	    }
	    
	    // Extrai o usuário do Optional
	    Users user = userOptional.get();
	    
	    // Define o usuário encontrado na resposta
	    response.setData(user);
	    
	    // Retorna a resposta com o usuário encontrado
	    return ResponseEntity.ok(response);
	}
	
	@DeleteMapping(value="/{id}")
	@PreAuthorize("hasAnyRole('ADMIN')")
	public ResponseEntity<Response<String>> delete(@PathVariable("id") Long id) {
	    Response<String> response = new Response<>();
	    
	    Optional<Users> user = userService.findById(id);
	    if (user.isEmpty()) {
	        response.getErrors().add("Register not found id: " + id);
	        return ResponseEntity.badRequest().body(response);
	    }

	    userService.deleteById(id); // Excluindo o usuário

	    // Retorna mensagem indicando sucesso na exclusão
	    response.setData("User with ID " + id + " was deleted successfully.");
	    return ResponseEntity.ok(response);
	}

	
	@GetMapping(value="/{page}/{count}")
	@PreAuthorize("hasAnyRole('ADMIN')")
	public ResponseEntity<Response<Page<Users>>> findAll(@PathVariable int page,@PathVariable int count){
		Response<Page<Users>> response = new Response<Page<Users>>();
		Page<Users> users = userService.findAll(page, count);
		response.setData(users);
		return ResponseEntity.ok(response);
	}
}
